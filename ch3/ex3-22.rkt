(define (make-queue)
  (let ((front-ptr '())
	(rear-ptr '()))
    (define (empty-queue?) (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
	(error "FRONT called with an empty queue")
	(car front-ptr)))
    (define (set-front-ptr! item) (set! front-ptr item))
    (define (set-rear-ptr! item) (set! rear-ptr item))
    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
	(cond ((empty-queue?)
	       (set-front-ptr! new-pair)
	       (set-rear-ptr! new-pair))
	      (else
		(set-cdr! rear-ptr new-pair)
		(set-rear-ptr! new-pair)))))
    (define (delete-queue! queue)
      (cond ((empty-queue?)
	     (error "DELETE! called with an empty queue"))
	    (else
	      (set-front-ptr! (cdr front-ptr)))))
    (define (print-queue) front-ptr)

    (define (dispatch m)
      (cond ((eq? 'empty-queue?) empty-queue?)
	    ((eq? 'front-queue) front-queue)
	    ((eq? 'insert-queue!) insert-queue!)
	    ((eq? 'delete-queue!) delete-queue)
	    ((eq? 'print-queue) print-queue)
	    (else (error "unknown operation -- QUEUE"))))
    dispatch))
